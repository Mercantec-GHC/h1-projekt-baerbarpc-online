@page "/database"
@inject DBService Db
@rendermode InteractiveServer

<PageTitle>Database</PageTitle>

<h3 class="mb-4">Database vedligeholdelse</h3>

@if (isBusy)
{
    <p><em>Arbejder …</em></p>
}
else if (!string.IsNullOrEmpty(message))
{
    <div class="alert @(success ? "alert-success" : "alert-danger")">@message</div>
}

<div class="mb-3">
    <button class="btn btn-primary me-2" @onclick="TestConnection">Test connection</button>
    <button class="btn btn-secondary me-2" @onclick="SetupUserTable">Opret User-tabel</button>
    <button class="btn btn-secondary me-2" @onclick="SetupProductModelsTable">Opret ProductModel-tabel</button>
    <button class="btn btn-info" @onclick="LoadTables">Load tabels</button>
</div>

@if (users?.Any() == true)
{
    <h4>Users</h4>
    <table class="table table-sm">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Email</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var u in users)
            {
                <tr>
                    <td>@u.Id</td>
                    <td>@u.Name</td>
                    <td>@u.Email</td>
                </tr>
            }
        </tbody>
    </table>
}

@if (productModels?.Any() == true)
{
    <h4>ProductModels</h4>
    <table class="table table-sm table-responsive">
        <thead>
            <tr>
                <th>Id</th>
                <th>Brand</th>
                <th>Model</th>
                <th>GPU</th>
                <th>CPU</th>
                <th>RAM</th>
                <th>Storage</th>
                <th>OS</th>
                <th>Price</th>
                <th>ScreenSize</th>
                <th>Condition</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var m in productModels)
            {
                <tr>
                    <td>@m.Id</td>
                    <td>@m.Brand</td>
                    <td>@m.Model</td>
                    <td>@m.Gpu</td>
                    <td>@m.Cpu</td>
                    <td>@m.Ram</td>
                    <td>@m.Storage</td>
                    <td>@m.OS</td>
                    <td>@m.Price</td>
                    <td>@m.ScreenSize</td>
                    <td>@m.Condition</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    bool isBusy;
    bool success;
    string? message;

    // Data-felter
    List<User>? users;
    List<ProductModel>? productModels;

    // Handlers til table-opsætning
    async Task TestConnection()
        => await Run(() => Db.TestConnectionAsync());

    async Task SetupUserTable()
        => await Run(() => Db.SetupUserTable());

    async Task SetupProductModelsTable()
        => await Run(() => Db.SetupProductModelsTable());

    // Ny: Henter alle rækker fra begge tabeller
    async Task LoadTables()
        => await Run(async () =>
        {
            users = await Db.GetAllUsers();
            productModels = await Db.GetAllProductModels();
        });

    // Fælles “spinner” / status-logger
    async Task Run(Func<Task> action)
    {
        isBusy = true;
        message = null;
        StateHasChanged();

        try
        {
            await action();
            success = true;
            message = "✔️ Handling fuldført";
        }
        catch (Exception ex)
        {
            success = false;
            message = ex.Message;
        }
        finally
        {
            isBusy = false;
            StateHasChanged();
        }
    }
}
