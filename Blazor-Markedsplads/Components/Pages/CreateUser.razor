@page "/CreateUser"
@using BlazorMarkedsplads.Models
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@inject IUserRepository UserRepo
@inject NavigationManager NavManager
@inject IJSRuntime JS
@using BCrypt.Net;
@rendermode InteractiveServer

<PageTitle>Opret Konto</PageTitle>

<section class="py-5" style="background-color:#f0f0f0; min-height:65vh;">
    <div class="container d-flex justify-content-center">
        <div class="card shadow-sm border-0" style="max-width:520px; width:100%;">
            <div class="card-body p-4 p-md-5">
                <h4 class="fw-bold">Opret Brugerkonto</h4>
                <p class="small text-muted mb-4">Udfyld nedenstående oplysninger for at oprette din konto</p>

                @if (!string.IsNullOrWhiteSpace(formError))
                {
                    <div class="alert alert-danger">@formError</div>
                }

                <EditForm Model="registerModel" OnValidSubmit="HandleRegistrationAsync" FormName="CreateUserForm">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" />

                    @* --- Din <EditForm> HTML-del forbliver uændret her --- *@
                    @* --- Udeladt for læsbarhed, da den er identisk. --- *@

                    <div class="mb-3">
                        <label class="form-label small fw-semibold">Fulde navn *</label>
                        <InputText class="form-control"
                                   @bind-Value="registerModel.FullName"
                                   placeholder="Indtast dit fulde navn" />
                        <ValidationMessage For="@(() => registerModel.FullName)" class="text-danger small" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label small fw-semibold">Email *</label>
                        <InputText class="form-control"
                                   type="email"
                                   @bind-Value="registerModel.Email"
                                   placeholder="Indtast din email" />
                        <ValidationMessage For="@(() => registerModel.Email)" class="text-danger small" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label small fw-semibold">Adgangskode *</label>
                        <InputText class="form-control"
                                   type="password"
                                   @bind-Value="registerModel.Password" />
                        <ValidationMessage For="@(() => registerModel.Password)" class="text-danger small" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label small fw-semibold">Bekræft adgangskode *</label>
                        <InputText class="form-control"
                                   type="password"
                                   @bind-Value="registerModel.ConfirmPassword" />
                        <ValidationMessage For="@(() => registerModel.ConfirmPassword)" class="text-danger small" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label small fw-semibold">Telefonnummer</label>
                        <InputText class="form-control"
                                   @bind-Value="registerModel.Phone"
                                   placeholder="Indtast dit telefonnummer" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label small fw-semibold">Adresse</label>
                        <InputText class="form-control"
                                   @bind-Value="registerModel.Address"
                                   placeholder="Indtast din adresse" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label small fw-semibold">By</label>
                        <InputText class="form-control"
                                   @bind-Value="registerModel.City"
                                   placeholder="Indtast by" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label small fw-semibold">Postnummer</label>
                        <InputText class="form-control"
                                   @bind-Value="registerModel.PostalCode"
                                   placeholder="Indtast postnummer" />
                    </div>

                    <div class="form-check mb-3">
                        <InputCheckbox class="form-check-input"
                                       @bind-Value="registerModel.AcceptTerms" />
                        <label class="form-check-label small">
                            Jeg accepterer vilkår og betingelser *
                        </label>
                        <ValidationMessage For="@(() => registerModel.AcceptTerms)" class="text-danger small d-block" />
                    </div>

                    <button type="submit" class="btn btn-primary w-100 mb-3">
                        Opret Konto
                    </button>

                    <p class="text-center small mb-0">
                        Har du allerede en konto? <a href="/login">Log ind her</a>
                    </p>
                </EditForm>
            </div>
        </div>
    </div>
</section>

@code {
    // -- Form Model & State --
    [SupplyParameterFromForm]
    private RegisterModel registerModel { get; set; } = new();
    private string formError = string.Empty;

    // -- Post-Action State --
    private bool userJustCreated = false;
    private int createdUserId;

    // -- Event Handlers --
    private async Task HandleRegistrationAsync()
    {
        formError = string.Empty;

        if (IsFormValid())
        {
            try
            {
                await CreateUserInDatabaseAsync();

                // Sæt flag, så OnAfterRenderAsync kan håndtere login og navigation.
                userJustCreated = true;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                // Håndter specifikt dublet-email fejl eller andre DB fejl.
                formError = ex.Message.Contains("duplicate key value violates unique constraint \"users_email_key\"")
                    ? "En bruger med denne email findes allerede."
                    : $"Kunne ikke oprette bruger: {ex.Message}";
            }
        }
    }

    // -- Lifecycle Methods --
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (userJustCreated)
        {
            // Nulstil flaget for at undgå at koden kører igen.
            userJustCreated = false;

            // Gem brugerens ID i browseren for at "logge ind" med det samme.
            await JS.InvokeVoidAsync("localStorage.setItem", "uid", createdUserId.ToString());

            // Naviger brugeren til deres nye profilside.
            NavManager.NavigateTo("/UserProfile", forceLoad: true); // forceLoad sikrer, at hele app'en genindlæses med den nye login-status.
        }
    }

    // -- Helper Methods --
    private bool IsFormValid()
    {
        if (registerModel.Password != registerModel.ConfirmPassword)
        {
            formError = "Adgangskoderne matcher ikke.";
            return false;
        }
        if (!registerModel.AcceptTerms)
        {
            formError = "Du skal acceptere vilkår og betingelser.";
            return false;
        }
        return true;
    }

    private async Task CreateUserInDatabaseAsync()
    {
        var newUser = new User
        {
            Name = registerModel.FullName,
            Email = registerModel.Email,
            Password = BCrypt.HashPassword(registerModel.Password), // Vigtigt: Hash adgangskoden!
            Phone = registerModel.Phone ?? string.Empty,
            Address = registerModel.Address ?? string.Empty,
            City = registerModel.City ?? string.Empty,
            ZipCode = registerModel.PostalCode ?? string.Empty
        };

        createdUserId = await UserRepo.InsertAsync(newUser);
    }

    // -- Page-Specific Model Class --
    private class RegisterModel
    {
        [Required(ErrorMessage = "Fulde navn er påkrævet")]
        public string FullName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Email er påkrævet")]
        [EmailAddress(ErrorMessage = "Ugyldig email adresse")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Adgangskode er påkrævet")]
        [MinLength(6, ErrorMessage = "Adgangskode skal være mindst 6 tegn")]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "Bekræft adgangskode er påkrævet")]
        [Compare(nameof(Password), ErrorMessage = "Adgangskoderne matcher ikke")]
        public string ConfirmPassword { get; set; } = string.Empty;

        public string? Phone { get; set; }
        public string? Address { get; set; }
        public string? City { get; set; }
        public string? PostalCode { get; set; }

        [Range(typeof(bool), "true", "true", ErrorMessage = "Du skal acceptere vilkår og betingelser")]
        public bool AcceptTerms { get; set; }
    }
}