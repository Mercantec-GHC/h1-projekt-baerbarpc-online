@page "/login"
@using System.ComponentModel.DataAnnotations
@using BlazorMarkedsplads.Models
@using BlazorMarkedsplads.Services
@using BCrypt.Net
@inject IUserRepository UserRepo
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime
@inject UserStateService UserState
@rendermode InteractiveServer

<PageTitle>Log ind</PageTitle>

<section class="py-5" style="background-color:#f0f0f0; min-height:65vh;">
    <div class="container d-flex justify-content-center">
        <div class="card shadow-sm border-0" style="max-width:520px; width:100%;">
            <div class="card-body p-4 p-md-5">
                <h4 class="fw-bold">Log ind</h4>
                <p class="small text-muted mb-4">Indtast dine oplysninger for at tilgå din konto</p>

                @if (!string.IsNullOrWhiteSpace(formError))
                {
                    <div class="alert alert-danger">@formError</div>
                }

                <EditForm Model="loginModel" OnValidSubmit="HandleValidSubmit" FormName="LoginForm">
                    <DataAnnotationsValidator />

                    <div class="mb-3">
                        <label class="form-label small fw-semibold">Email *</label>
                        <InputText class="form-control"
                                   type="email"
                                   @bind-Value="loginModel.Email"
                                   placeholder="Indtast din email" />
                        <ValidationMessage For="@(() => loginModel.Email)" class="text-danger small" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label small fw-semibold">Adgangskode *</label>
                        <InputText class="form-control"
                                   type="password"
                                   @bind-Value="loginModel.Password" />
                        <ValidationMessage For="@(() => loginModel.Password)" class="text-danger small" />
                    </div>

                    <button type="submit" class="btn btn-primary w-100 mb-3">
                        Log ind
                    </button>

                    <p class="text-center small mb-0">
                        Har du ikke en konto? <a href="/CreateUser">Opret en her</a>
                    </p>
                </EditForm>
            </div>
        </div>
    </div>
</section>

@code {
    // -- Form Model & State --
    private LoginModel loginModel = new();
    private string? formError;

    // -- Event Handlers --
    private async Task HandleValidSubmit()
    {
        formError = null; // Nulstil fejlbeskeder ved hvert forsøg.

        try
        {
            // Trin 1: Find brugeren baseret på email.
            var user = await UserRepo.GetByEmailAsync(loginModel.Email);

            // Trin 2: Verificer, at brugeren findes OG at passwordet er korrekt.
            if (user != null && BCrypt.Verify(loginModel.Password, user.Password))
            {
                // Trin 3: Udfør selve login-handlingen.
                await LogUserInAsync(user);
            }
            else
            {
                formError = "Ugyldig email eller adgangskode.";
            }
        }
        catch (Exception ex)
        {
            formError = $"Der opstod en systemfejl: {ex.Message}";
            Console.WriteLine($"Login-fejl: {ex}");
        }
    }

    // -- Helper Methods --
    private async Task LogUserInAsync(User user)
    {
        // Gem bruger-ID i browserens `localStorage` for at huske login på tværs af sessions/refreshes.
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "uid", user.Id.ToString());

        // Opdater den delte `UserStateService`, så UI-elementer (som MainLayout)
        // øjeblikkeligt reagerer på, at brugeren er logget ind.
        UserState.Login(user.Id);

        // Naviger brugeren til deres personlige profilside.
        NavManager.NavigateTo("/UserProfile");
    }

    // -- Page-Specific Model Class --
    private class LoginModel
    {
        [Required(ErrorMessage = "Email er påkrævet")]
        [EmailAddress(ErrorMessage = "Indtast venligst en gyldig email-adresse")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Adgangskode er påkrævet")]
        public string Password { get; set; } = string.Empty;
    }
}