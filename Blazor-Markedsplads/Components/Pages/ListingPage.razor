@page "/ListingPage"
@inject IListingRepository ListingRepo
@inject NavigationManager NavManager
@rendermode InteractiveServer

<PageTitle>Alle Annoncer</PageTitle>

<div class="container py-5">
    @if (!string.IsNullOrWhiteSpace(Query))
    {
        <h3 class="fw-bold mb-4">Søgeresultater for "@Query"</h3>
    }
    else
    {
        <h3 class="fw-bold mb-4">Alle Annoncer</h3>
    }

    <div class="row mb-4">
        <div class="col-md-8 mb-2 mb-md-0">
            <InputText @bind-Value="filterTerm" placeholder="Søg på titel, brand, model..." class="form-control" @onkeyup="HandleSearchInput" />
        </div>
        <div class="col-md-4">
            <button class="btn btn-primary w-100" @onclick="Search">Søg</button>
        </div>
    </div>

    @if (!string.IsNullOrWhiteSpace(errorMsg))
    {
        <div class="alert alert-danger">@errorMsg</div>
    }
    else if (allListings == null)
    {
        <p><em>Indlæser annoncer...</em></p>
    }
    else if (allListings.Any())
    {
        <div class="row g-4">
            @foreach (var p in allListings)
            {
                <div class="col-12 col-sm-6 col-md-4 col-lg-3">
                    <NavLink href="@($"/ListingDetailsPage/{p.Id}")" class="text-decoration-none text-body">
                        <div class="card h-100 shadow-sm border-0 hover-shadow">

                            <img src="@(p.Images.Any() ? $"/uploads/listings/{p.Images.First().ImagePath}" : "Images/laptop-placeholder.png")"
                                 class="card-img-top product-img"
                                 alt="@p.Title" />

                            <div class="card-body">
                                <h5 class="card-title fw-semibold" style="min-height: 48px;">@p.Title</h5>
                                <p class="card-text small text-muted">@($"{p.Brand} {p.Model}")</p>

                                @if (p.Seller != null && !string.IsNullOrEmpty(p.Seller.Name))
                                {
                                    <p class="card-text small text-muted">Sælger: <span class="fw-semibold text-dark">@p.Seller.Name</span></p>
                                }

                                <p class="card-text fw-bold text-success mb-1">@FormatPrice(p.Price)</p>
                            </div>

                            <div class="card-footer bg-white border-0 py-2 d-flex justify-content-between align-items-center">
                                <span class="small text-muted">@p.Location</span>
                                <i class="bi bi-arrow-right-circle fs-4 text-secondary"></i>
                            </div>
                        </div>
                    </NavLink>
                </div>
            }
        </div>
    }
    else
    {
        <p class="text-muted">Ingen annoncer fundet, der matcher din søgning.</p>
    }
</div>

@code {
    // -- Parameters --
    [Parameter]
    [SupplyParameterFromQuery]
    public string? Query { get; set; } // Modtager søgeord fra URL (?query=...)

    // -- Page State --
    private List<Listing>? allListings;
    private string filterTerm = ""; // Bundet til søgefeltets input
    private string? errorMsg;

    // -- Lifecycle Methods --
    protected override async Task OnParametersSetAsync()
    {
        // Denne metode er nøglen til en dynamisk side. Den kører HVER GANG
        // en parameter (som 'Query' fra URL'en) ændres.

        filterTerm = Query ?? ""; // Opdater søgefeltet, så det matcher URL'en.

        try
        {
            // Hent data baseret på det nuværende Query. Hvis Query er tomt,
            // henter SearchAsync (ideelt set) alle annoncer.
            allListings = await ListingRepo.SearchAsync(Query ?? "");
            errorMsg = null; // Nulstil fejlbesked ved succesfuld hentning.
        }
        catch (Exception ex)
        {
            errorMsg = $"Fejl ved hentning af annoncer: {ex.Message}";
            Console.WriteLine(ex);
        }
    }

    // -- Event Handlers --
    private void Search()
    {
        // I stedet for at genindlæse data direkte, navigerer vi til en ny URL.
        // Denne navigation får Blazor til at køre OnParametersSetAsync igen,
        // hvilket sikrer, at sidens tilstand er synkroniseret med URL'en.
        NavManager.NavigateTo($"/ListingPage?query={Uri.EscapeDataString(filterTerm)}");
    }

    private void HandleSearchInput(KeyboardEventArgs e)
    {
        // Giver brugeren mulighed for at søge ved at trykke Enter.
        if (e.Key == "Enter")
        {
            Search();
        }
    }

    // -- Helper Methods --
    private static string FormatPrice(decimal price)
    {
        // Formaterer prisen for en konsistent visning.
        return price > 0 ? $"{price:N0} kr." : "Pris aftales";
    }
}