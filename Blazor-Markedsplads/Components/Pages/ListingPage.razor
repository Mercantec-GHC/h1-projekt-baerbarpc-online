@page "/ListingPage"
@inject IListingRepository ListingRepo
@inject NavigationManager NavManager
@rendermode InteractiveServer

<PageTitle>Alle Annoncer</PageTitle>

<div class="container py-5">
    @if (!string.IsNullOrWhiteSpace(Query))
    {
        <h3 class="fw-bold mb-4">Søgeresultater for "@Query"</h3>
    }
    else
    {
        <h3 class="fw-bold mb-4">Alle Annoncer</h3>
    }

    <div class="row mb-4">
        <div class="col-md-8 mb-2 mb-md-0">
            <InputText @bind-Value="filterTerm" placeholder="Søg på titel, brand, model..." class="form-control" @onkeyup="HandleSearchInput" />
        </div>
        <div class="col-md-4">
            <button class="btn btn-primary w-100" @onclick="Search">Søg</button>
        </div>
    </div>

    @if (!string.IsNullOrWhiteSpace(errorMsg))
    {
        <div class="alert alert-danger">@errorMsg</div>
    }
    else if (allListings == null)
    {
        <p><em>Indlæser annoncer...</em></p>
    }
    else if (allListings.Any())
    {
        <div class="row g-4">
            @foreach (var p in allListings)
            {
                <div class="col-12 col-sm-6 col-md-4 col-lg-3">
                    <NavLink href="@($"/ListingDetailsPage/{p.Id}")" class="text-decoration-none text-body">
                        <div class="card h-100 shadow-sm border-0 hover-shadow">

                            <img src="@(p.Images.Any() ? $"/uploads/listings/{p.Images.First().ImagePath}" : "Images/laptop-placeholder.png")"
                                 class="card-img-top product-img"
                                 alt="@p.Title" />

                            <div class="card-body">
                                <h5 class="card-title fw-semibold" style="min-height: 48px;">@p.Title</h5>
                                <p class="card-text small text-muted">@($"{p.Brand} {p.Model}")</p>

                                @if (p.Seller != null && !string.IsNullOrEmpty(p.Seller.Name))
                                {
                                    <p class="card-text small text-muted">Sælger: <span class="fw-semibold text-dark">@p.Seller.Name</span></p>
                                }

                                <p class="card-text fw-bold text-success mb-1">@FormatPrice(p.Price)</p>
                            </div>

                            <div class="card-footer bg-white border-0 py-2 d-flex justify-content-between align-items-center">
                                <span class="small text-muted">@p.Location</span>
                                <i class="bi bi-arrow-right-circle fs-4 text-secondary"></i>
                            </div>
                        </div>
                    </NavLink>
                </div>
            }
        </div>
    }
    else
    {
        <p class="text-muted">Ingen annoncer fundet, der matcher din søgning.</p>
    }
</div>

@code {
    // ------------------- PARAMETERS -------------------
    // En parameter er data, som komponenten modtager udefra.

    // [Parameter] og [SupplyParameterFromQuery] arbejder sammen for at hente værdien af 'query'
    // fra URL'en (f.eks. /ListingPage?query=Dell).
    // Værdien tildeles automatisk til 'Query'-property'en.
    [Parameter]
    [SupplyParameterFromQuery]
    public string? Query { get; set; }

    // ------------------- PAGE STATE -------------------
    // Komponentens interne hukommelse.

    // Holder listen af annoncer, der skal vises. Kan være 'null' før data er hentet.
    private List<Listing>? allListings;

    // Er bundet til søgefeltet i UI'et og holder den tekst, brugeren skriver.
    private string filterTerm = "";

    // Holder en eventuel fejlbesked, der skal vises til brugeren.
    private string? errorMsg;

    // ------------------- LIFECYCLE METHODS -------------------
    // Metoder, som Blazor kalder automatisk.

    /// <summary>
    /// Kører, HVER GANG en parameter (som 'Query') bliver sat eller ændret.
    /// Dette er nøglen til at lave en dynamisk side, der reagerer på ændringer i URL'en.
    /// </summary>
    protected override async Task OnParametersSetAsync()
    {
        // Opdater søgefeltet i UI'et, så det afspejler det, der står i URL'en.
        // Hvis URL'en ikke har en query, bliver feltet tomt.
        filterTerm = Query ?? "";

        try
        {
            // Nulstil listen for at vise loading-beskeden, mens nye data hentes.
            allListings = null;

            // Kald repository'ets søgemetode med værdien fra URL'en.
            // Repository'et er designet til at returnere alle annoncer, hvis søgeordet er tomt.
            allListings = await ListingRepo.SearchAsync(Query ?? "");

            // Nulstil eventuelle tidligere fejlbeskeder.
            errorMsg = null;
        }
        catch (Exception ex)
        {
            // Hvis databasekaldet fejler, gemmes en fejlbesked til visning i UI'et.
            errorMsg = $"Fejl ved hentning af annoncer: {ex.Message}";
            Console.WriteLine(ex); // Log den fulde fejl til konsollen for udvikleren.
        }
    }

    // ------------------- EVENT HANDLERS -------------------
    // Metoder, der kører som reaktion på brugerhandlinger.

    /// <summary>
    /// Udfører en søgning ved at navigere til en ny URL.
    /// </summary>
    private void Search()
    {
        // Denne metode opdaterer ikke data direkte. I stedet opdaterer den URL'en.
        // Blazor registrerer ændringen i URL'en og kalder automatisk OnParametersSetAsync,
        // som så er ansvarlig for at hente de nye data.
        // Dette er et centralt og meget robust mønster i Blazor.
        NavManager.NavigateTo($"/ListingPage?query={Uri.EscapeDataString(filterTerm)}");
    }

    /// <summary>
    /// Kaldes, når brugeren taster i søgefeltet. Starter en søgning på "Enter".
    /// </summary>
    private void HandleSearchInput(KeyboardEventArgs e)
    {
        // Hvis den tast, der blev sluppet, var "Enter"-tasten...
        if (e.Key == "Enter")
        {
            // ...så kalder vi den samme metode, som søgeknappen bruger.
            Search();
        }
    }

    // ------------------- HELPER METHODS -------------------
    // Private metoder, der udfører små, specifikke opgaver.

    /// <summary>
    /// Formaterer prisen til en pænere tekst-streng.
    /// </summary>
    private static string FormatPrice(decimal price)
    {
        // Bruger en "ternary operator" (en kort if-else) til at formatere prisen.
        // :N0 formaterer med tusindtalsseparator og uden decimaler.
        return price > 0 ? $"{price:N0} kr." : "Pris aftales";
    }
}