@page "/"
@inject NavigationManager NavManager      // Til at styre navigation mellem sider.
@inject IListingRepository ListingRepo    // Til at kommunikere med databasen om 'Listings'. Defineret i Services/IListingRepository.cs.

@rendermode InteractiveServer

<PageTitle>LaptopMarket – Forside</PageTitle>



<section class="hero-section py-5 bg-light border-bottom">
    <div class="container text-center">
        <h1 class="display-5 fw-bold">Find Din Perfekte Bærbar</h1>
        <p class="lead text-muted mx-auto" style="max-width: 600px;">
            Gennemse annoncer for bærbare computere fra pålidelige brugere. Opret selv annonce gratis!
        </p>

        <div class="d-flex justify-content-center mt-4">
            <div class="input-group" style="max-width: 600px;">
                <span class="input-group-text bg-white border-end-0">
                    <i class="bi bi-search"></i>
                </span>
                <InputText class="form-control border-start-0" placeholder="Søg brand/model/..." @bind-Value="searchTerm" @onkeyup="HandleSearchInput" />
            </div>
        </div>

        <div class="mt-3 d-flex justify-content-center gap-3 flex-column flex-md-row">
            <button class="btn btn-primary px-5" @onclick="Search">Søg</button>
            <button class="btn btn-success px-4" @onclick="NavigateCreateAd">Opret Annonce</button>
        </div>
    </div>
</section>

<section class="premium-section py-5">
    <div class="container">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h2 class="h4 fw-bold mb-0">Premium Annoncer</h2>
            <a class="text-primary fw-semibold text-decoration-none" href="/ListingPage">Se Alle &gt;</a>
        </div>

        @if (!string.IsNullOrWhiteSpace(loadError))
        {
            <div class="alert alert-danger">@loadError</div>
        }
        else if (premiumListings?.Any() == true)
        {
            <div class="row g-4">
                @foreach (var p in premiumListings)
                {
                    <div class="col-12 col-sm-6 col-md-4 col-lg-3">
                        <NavLink href="@($"/ListingDetailsPage/{p.Id}")" class="text-decoration-none text-body">
                            <div class="card h-100 shadow-sm border-0 hover-shadow">

                                <img src="@(p.Images != null && p.Images.Any() ? $"/uploads/listings/{p.Images.First().ImagePath}" : "Images/laptop-placeholder.png")"
                                     class="card-img-top product-img"
                                     alt="@($"{p.Brand} {p.Model}")" />

                                <div class="card-body">
                                    <h5 class="card-title fw-semibold">@p.Title</h5>
                                    <p class="card-text small text-muted">@($"{p.Brand} {p.Model}")</p>
                                    <p class="card-text fw-bold text-success mb-1">@FormatPrice(p.Price)</p>
                                </div>

                                <div class="card-footer bg-white border-0 py-2 d-flex justify-content-between align-items-center">
                                    <span class="small text-muted">@p.Location</span>
                                    <i class="bi bi-arrow-right-circle fs-4 text-secondary"></i>
                                </div>
                            </div>
                        </NavLink>
                    </div>
                }
            </div>
        }
        else
        {
            <p class="text-muted">Der er endnu ingen premium annoncer.</p>
        }
    </div>
</section>


@code {
    // ------------------- PAGE STATE -------------------
    // State-variable er komponentens interne data.

    // En liste til at holde de premium-annoncer, der hentes fra databasen. Starter som en tom liste.
    private List<Listing> premiumListings = new();

    // En streng til at vise en fejlbesked i UI'et, hvis datahentning fejler. '?' betyder, den kan være null.
    private string? loadError;

    // En streng, der er bundet til søgefeltet. Holder den tekst, brugeren indtaster.
    private string? searchTerm;

    // ------------------- LIFECYCLE METHODS -------------------
    // Metoder, som Blazor kalder automatisk på bestemte tidspunkter i en komponents levetid.

    /// <summary>
    /// Kører, når komponenten bliver initialiseret. Ideel til at hente asynkrone data, som siden skal bruge fra start.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        // try-catch-blokken sikrer, at applikationen ikke crasher, hvis databasen ikke kan nås.
        try
        {
            // 'await' pauser metoden, indtil databasekaldet er færdigt, uden at blokere resten af appen.
            // Kalder GetPremiumAsync i vores repository for at hente de 4 dyreste annoncer.
            // Resultatet gemmes i sidens state-variabel.
            premiumListings = await ListingRepo.GetPremiumAsync(4);
        }
        catch (Exception ex)
        {
            // Hvis der opstår en fejl, logges den til konsollen (for udvikleren).
            Console.WriteLine($"Error fetching premium listings: {ex.Message}");
            // En brugervenlig fejlbesked sættes til 'loadError'-variablen, som så vises i UI'et.
            loadError = "Der opstod en fejl under indlæsning af premium-annoncer. Prøv igen senere.";
        }
    }

    // ------------------- EVENT HANDLERS -------------------
    // Metoder, der kører som reaktion på brugerhandlinger som klik og tastetryk.

    /// <summary>
    /// Håndterer søge-eventet, enten fra knappen eller Enter-tasten.
    /// </summary>
    private void Search()
    {
        // Sammensætter den URL, vi skal navigere til, baseret på om der er tekst i søgefeltet.
        // Uri.EscapeDataString sikrer, at specialtegn (f.eks. mellemrum) bliver korrekt håndteret i URL'en.
        var targetUrl = !string.IsNullOrWhiteSpace(searchTerm)
            ? $"/ListingPage?query={Uri.EscapeDataString(searchTerm)}"
            : "/ListingPage";

        // Bruger NavigationManager til at sende brugeren til den nye URL.
        // Dette aktiverer 'ListingPage.razor'-komponenten og overfører søgeordet som en parameter.
        NavManager.NavigateTo(targetUrl);
    }

    /// <summary>
    /// Kaldes af @onkeyup-eventet på søgefeltet.
    /// </summary>
    /// <param name="e">Indeholder information om den tast, der blev trykket på.</param>
    private void HandleSearchInput(KeyboardEventArgs e)
    {
        // Tjekker, om den tast, der blev sluppet, var "Enter"-tasten.
        if (e.Key == "Enter")
        {
            // Hvis ja, starter den en søgning.
            Search();
        }
    }

    /// <summary>
    /// Navigerer brugeren til siden for oprettelse af annonce.
    /// </summary>
    private void NavigateCreateAd()
    {
        // Simpel navigation til '/CreateListing', som er defineret i 'CreateListing.razor'.
        NavManager.NavigateTo("/CreateListing");
    }

    // ------------------- HELPER METHODS -------------------
    // Private metoder, der udfører små, specifikke opgaver for at holde koden ren.

    /// <summary>
    /// Formaterer en decimalpris til en pænere tekst-streng.
    /// </summary>
    /// <param name="price">Prisen som et decimaltal.</param>
    /// <returns>En formateret streng, f.eks. "1.500 kr.".</returns>
    private static string FormatPrice(decimal price)
    {
        // 'price > 0' er en kort måde at tjekke, om prisen er sat.
        // ':N0' formaterer tallet med tusindtalsseparator og uden decimaler.
        return price > 0 ? $"{price:N0} kr." : "Pris efter aftale";
    }
}