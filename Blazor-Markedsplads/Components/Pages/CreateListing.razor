@page "/CreateListing"
@inject NavigationManager NavManager      // Til at styre navigation mellem sider.
@inject IListingRepository ListingRepo    // Til at kommunikere med databasen om 'Listings'. Defineret i Services/IListingRepository.cs.
@inject IWebHostEnvironment Environment   // Til at finde stier på serveren, f.eks. til billed-uploads i 'wwwroot'.
@inject UserStateService UserState        // Den centrale service, der holder styr på brugerens login-status.
@using System.IO                         
@using BlazorMarkedsplads.Models
@rendermode InteractiveServer             // Gør det muligt at interagere med siden uden at genindlæse den.

<PageTitle>@pageTitle</PageTitle>

<section class="py-5" style="background-color:#f8f9fa; min-height:70vh;">
    <div class="container d-flex justify-content-center">
        <div class="card shadow-sm border-0" style="max-width: 650px; width:100%;">
            <div class="card-body p-4 p-md-5">
                <h4 class="fw-bold">@pageTitle</h4>
                <p class="text-muted mb-4">Udfyld oplysninger om din bærbare computer</p>

                @if (!string.IsNullOrWhiteSpace(formError))
                {
                    <div class="alert alert-danger">@formError</div>
                }

                <EditForm Model="createModel" OnValidSubmit="HandleValidSubmit" FormName="CreateListingForm">
                    <DataAnnotationsValidator />

                    <div class="row g-3">
                        <div class="col-12">
                            <label for="title" class="form-label fw-semibold">Overskrift</label>
                            <InputText id="title" class="form-control" @bind-Value="createModel.Title" />
                        </div>

                        <div class="col-md-6">
                            <label for="brand" class="form-label fw-semibold">Mærke</label>
                            <InputSelect id="brand" class="form-select" @bind-Value="createModel.Brand">
                                <option value="">– vælg –</option>
                                <option value="Apple">Apple</option>
                                <option value="Dell">Dell</option>
                                <option value="HP">HP</option>
                                <option value="Lenovo">Lenovo</option>
                                <option value="ASUS">ASUS</option>
                                <option value="Acer">Acer</option>
                                <option value="MSI">MSI</option>
                                <option value="Razer">Razer</option>
                                <option value="Andet">Andet</option>
                            </InputSelect>
                        </div>

                        <div class="col-md-6">
                            <label for="model" class="form-label fw-semibold">Model</label>
                            <InputText id="model" class="form-control" @bind-Value="createModel.Model" />
                        </div>

                        <div class="col-md-6">
                            <label for="cpu" class="form-label fw-semibold">CPU</label>
                            <InputSelect id="cpu" class="form-select" @bind-Value="createModel.Cpu">
                                <option value="">– vælg –</option>
                                <option value="Intel i3">Intel i3</option>
                                <option value="Intel i5">Intel i5</option>
                                <option value="Intel i7">Intel i7</option>
                                <option value="Intel i9">Intel i9</option>
                                <option value="AMD Ryzen 3">AMD Ryzen 3</option>
                                <option value="AMD Ryzen 5">AMD Ryzen 5</option>
                                <option value="AMD Ryzen 7">AMD Ryzen 7</option>
                                <option value="AMD Ryzen 9">AMD Ryzen 9</option>
                                <option value="Apple M1">Apple M1</option>
                                <option value="Apple M2">Apple M2</option>
                                <option value="Apple M3">Apple M3</option>
                                <option value="Andet">Andet</option>
                            </InputSelect>
                        </div>

                        <div class="col-md-6">
                            <label for="gpu" class="form-label fw-semibold">GPU</label>
                            <InputText id="gpu" class="form-control" @bind-Value="createModel.Gpu" />
                        </div>

                        <div class="col-md-4">
                            <label for="ram" class="form-label fw-semibold">RAM (GB)</label>
                            <InputSelect id="ram" class="form-select" @bind-Value="createModel.Ram">
                                <option value="0">– vælg –</option>
                                <option value="4">4 GB</option>
                                <option value="8">8 GB</option>
                                <option value="16">16 GB</option>
                                <option value="32">32 GB+</option>
                            </InputSelect>
                        </div>

                        <div class="col-md-4">
                            <label for="storage" class="form-label fw-semibold">Lager (GB)</label>
                            <InputNumber id="storage" class="form-control" @bind-Value="createModel.Storage" />
                        </div>

                        <div class="col-md-4">
                            <label for="screenSize" class="form-label fw-semibold">Skærm (")</label>
                            <InputSelect id="screenSize" class="form-select" @bind-Value="createModel.ScreenSize">
                                <option value="">– vælg –</option>
                                <option value="Under 13&quot;">Under 13”</option>
                                <option value="13-14&quot;">13-14”</option>
                                <option value="15-16&quot;">15-16”</option>
                                <option value="Over 17&quot;">Over 17”</option>
                            </InputSelect>
                        </div>

                        <div class="col-md-6">
                            <label for="os" class="form-label fw-semibold">Styresystem</label>
                            <InputSelect id="os" class="form-select" @bind-Value="createModel.OS">
                                <option value="">– vælg –</option>
                                <option value="Windows">Windows</option>
                                <option value="macOS">macOS</option>
                                <option value="Linux">Linux</option>
                                <option value="Uden OS">Uden OS</option>
                            </InputSelect>
                        </div>

                        <div class="col-md-6">
                            <label for="condition" class="form-label fw-semibold">Tilstand</label>
                            <InputSelect id="condition" class="form-select" @bind-Value="createModel.Condition">
                                <option value="">– vælg –</option>
                                <option value="Næsten ny">Næsten ny</option>
                                <option value="Let brugt">Let brugt</option>
                                <option value="Brugt">Brugt</option>
                                <option value="Slidt">Slidt</option>
                            </InputSelect>
                        </div>

                        <div class="col-md-6">
                            <label for="price" class="form-label fw-semibold">Pris (kr.)</label>
                            <InputNumber id="price" class="form-control" @bind-Value="createModel.Price" />
                        </div>

                        <div class="col-md-6">
                            <label for="phone" class="form-label fw-semibold">Telefon</label>
                            <InputText id="phone" class="form-control" @bind-Value="createModel.Phone" />
                        </div>

                        <div class="col-md-12">
                            <label for="location" class="form-label fw-semibold">Lokation</label>
                            <InputText id="location" class="form-control" @bind-Value="createModel.Location" />
                        </div>

                        <div class="col-12">
                            <label for="images" class="form-label fw-semibold">Billeder (op til 5)</label>
                            <InputFile id="images" class="form-control" OnChange="HandleFileSelected" multiple />
                        </div>

                        @if (uploadedFileNames.Any())
                        {
                            <div class="col-12 mt-2">
                                <p class="small text-muted mb-1">Valgte filer:</p>
                                <ul class="list-group">
                                    @foreach (var fileName in uploadedFileNames)
                                    {
                                        <li class="list-group-item list-group-item-light small py-1 px-2">@fileName</li>
                                    }
                                </ul>
                            </div>
                        }

                        <div class="col-md-12">
                            <label for="description" class="form-label fw-semibold">Beskrivelse</label>
                            <InputTextArea id="description" class="form-control" @bind-Value="createModel.Description" rows="4" />
                        </div>

                        <div class="col-md-12 form-check mt-2">
                            <InputCheckbox id="acceptTerms" class="form-check-input" @bind-Value="createModel.AcceptTerms" />
                            <label for="acceptTerms" class="form-check-label">
                                Jeg accepterer vilkår &amp; betingelser
                            </label>
                        </div>
                    </div>

                    <div class="d-flex gap-2 mt-4">
                        <button type="submit" class="btn btn-primary flex-grow-1">
                            @submitButtonText
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</section>

@code {
    // ------------------- PARAMETERS -------------------
    // En parameter er data, som komponenten modtager udefra.

    // [Parameter] angiver, at dette er en komponentparameter.
    // [SupplyParameterFromQuery] betyder, at værdien kan komme fra URL'ens query string (f.eks. ?editId=123).
    [Parameter]
    [SupplyParameterFromQuery]
    public int? EditId { get; set; }

    // ------------------- PAGE STATE -------------------
    // State-variable er komponentens interne hukommelse. De holder styr på data, mens siden er åben.

    // 'createModel' er et Listing-objekt, som EditForm er bundet til. Det holder alle data fra formularfelterne.
    private Listing createModel = new();

    // En streng til at vise fejlbeskeder til brugeren i toppen af formularen.
    private string formError = string.Empty;

    // Variable til dynamisk at ændre teksten i UI'et baseret på, om vi opretter eller redigerer.
    private string pageTitle = "Opret Annonce";
    private string submitButtonText = "Opret annonce";

    // En "computed property", der hurtigt fortæller os, om vi er i redigeringstilstand.
    private bool IsEditMode => EditId.HasValue;

    // ------------------- FILE UPLOAD STATE -------------------

    // En liste til at holde de faktiske filer, som brugeren har valgt. Klar til at blive streamet til serveren.
    private readonly List<IBrowserFile> loadedFiles = new();

    // En liste til kun at holde filnavnene, som vi viser i UI'et som bekræftelse til brugeren.
    private readonly List<string> uploadedFileNames = new();

    // ------------------- LIFECYCLE METHODS -------------------
    // Livscyklus-metoder er specielle metoder, som Blazor kalder automatisk på bestemte tidspunkter.

    /// <summary>
    /// Kører én gang, når komponenten bliver initialiseret. Bruges her til at tjekke brugerens login-status.
    /// </summary>
    protected override void OnInitialized()
    {
        // Tjekker den centrale UserStateService for at se, om en bruger er logget ind.
        if (!UserState.IsLoggedIn)
        {
            // Hvis ikke, omdirigeres brugeren til login-siden via NavigationManager.
            NavManager.NavigateTo("/login");
        }
    }

    /// <summary>
    /// Kører, HVER GANG komponentens parametre (som EditId) bliver sat eller ændret.
    /// Perfekt til at hente data eller ændre tilstand baseret på URL'en.
    /// </summary>
    protected override async Task OnParametersSetAsync()
    {
        // Tjekker, om vi er i redigeringstilstand (dvs. om der er et 'editId' i URL'en).
        if (IsEditMode)
        {
            // Hvis ja, kalder vi en helper-metode til at hente den eksisterende annonce.
            await LoadExistingListingForEdit();
        }
        else
        {
            // Hvis nej, sikrer vi, at siden er i "opret"-tilstand med tomme felter og korrekte tekster.
            pageTitle = "Opret Annonce";
            submitButtonText = "Opret annonce";
            createModel = new Listing();
        }
    }

    // ------------------- EVENT HANDLERS -------------------
    // Event Handlers er metoder, der kører som reaktion på brugerhandlinger.

    /// <summary>
    /// Denne metode kaldes af EditForm's 'OnValidSubmit'-event. Den fungerer som startpunktet for hele formular-submission processen.
    /// </summary>
    private async Task HandleValidSubmit()
    {
        // Nulstil fejlbeskeder ved hvert nyt forsøg.
        formError = string.Empty;

        // Kører vores egne, manuelle valideringer (f.eks. at tjekke dropdowns, der ikke er dækket af DataAnnotations).
        if (!IsCustomValidationValid())
        {
            return; // Afbryd processen, hvis validering fejler.
        }

        try
        {
            // Udfør enten opdatering eller oprettelse baseret på, om vi er i redigeringstilstand.
            if (IsEditMode)
            {
                await HandleUpdateAsync();
            }
            else
            {
                await HandleCreateAsync();
            }
        }
        catch (Exception ex)
        {
            // Hvis noget uventet går galt i databasen, vises en generel fejlbesked.
            formError = $"Der opstod en systemfejl: {ex.Message}";
        }
    }

    /// <summary>
    /// Denne metode kaldes af InputFile-komponentens 'OnChange'-event, når brugeren vælger filer.
    /// </summary>
    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        // Nulstil listerne for at fjerne eventuelle tidligere valgte filer.
        loadedFiles.Clear();
        uploadedFileNames.Clear();

        // Hent de valgte filer (maks. 5) og tilføj dem til 'loadedFiles'-listen.
        loadedFiles.AddRange(e.GetMultipleFiles(5));

        // Udfyld listen med filnavne, som vi kan vise i UI'et.
        foreach (var file in loadedFiles)
        {
            uploadedFileNames.Add(file.Name);
        }

        // Nulstil fejlbeskeden, da brugeren nu har interageret med fil-input.
        formError = string.Empty;
    }

    // ------------------- HELPER METHODS -------------------
    // Helper-metoder er private metoder, der udfører specifikke, genbrugelige opgaver for at holde event-handlerne rene og overskuelige.

    /// <summary>
    /// Henter en eksisterende annonce fra databasen og udfylder formularen med dens data.
    /// </summary>
    private async Task LoadExistingListingForEdit()
    {
        // Kalder repository'et for at hente annoncen med det ID, vi har fået fra URL'en.
        var existingListing = await ListingRepo.GetByIdAsync(EditId.Value);

        // Tjekker, om annoncen findes, OG om den tilhører den bruger, der er logget ind. Vigtig sikkerhedsforanstaltning.
        if (existingListing != null && existingListing.UserId == UserState.UserId)
        {
            // Opdater UI-tekster til "rediger"-tilstand.
            pageTitle = "Rediger Annonce";
            submitButtonText = "Gem Ændringer";

            // Sæt 'createModel' til at være det hentede objekt. Blazor opdaterer automatisk alle input-felter i formularen.
            createModel = existingListing;
        }
        else
        {
            // Hvis annoncen ikke findes eller tilhører en anden, vises en fejl og brugeren sendes tilbage til en tom opret-side.
            formError = "Annoncen blev ikke fundet, eller du har ikke tilladelse til at redigere den.";
            NavManager.NavigateTo("/CreateListing");
        }
    }

    /// <summary>
    /// Håndterer logikken for at oprette en HELT NY annonce.
    /// </summary>
    private async Task HandleCreateAsync()
    {
        // Tildel den nye annonce til den aktive bruger og sæt et tidsstempel.
        createModel.UserId = UserState.UserId.Value;
        createModel.CreatedUtc = DateTime.UtcNow;

        // Kald repository'et for at indsætte data i databasen. Metoden returnerer det nye ID.
        int newId = await ListingRepo.InsertAsync(createModel);

        // Kald helper-metoden til at behandle og gemme eventuelt uploadede billeder, knyttet til det nye ID.
        await ProcessImagesAsync(newId);

        // Send brugeren videre til den nye annonces detaljeside (ListingDetailsPage.razor).
        NavManager.NavigateTo($"/ListingDetailsPage/{newId}");
    }

    /// <summary>
    /// Håndterer logikken for at opdatere en EKSISTERENDE annonce.
    /// </summary>
    private async Task HandleUpdateAsync()
    {
        // Kald repository'et for at opdatere den eksisterende række i databasen med de nye data fra 'createModel'.
        await ListingRepo.UpdateAsync(createModel);

        // Behandl og gem eventuelle NYE billeder, brugeren har tilføjet under redigeringen.
        await ProcessImagesAsync(createModel.Id);

        // Send brugeren tilbage til den nu opdaterede annonces detaljeside.
        NavManager.NavigateTo($"/ListingDetailsPage/{createModel.Id}");
    }

    /// <summary>
    /// Indeholder specifikke valideringsregler, som ikke dækkes af DataAnnotations.
    /// </summary>
    /// <returns>True, hvis alle regler er overholdt, ellers false.</returns>
    private bool IsCustomValidationValid()
    {
        if (!createModel.AcceptTerms)
        {
            formError = "Du skal acceptere vilkår og betingelser.";
            return false;
        }
        if (createModel.Ram == 0)
        {
            formError = "Du skal vælge en RAM-størrelse.";
            return false;
        }
        if (string.IsNullOrWhiteSpace(createModel.ScreenSize))
        {
            formError = "Du skal vælge en skærmstørrelse.";
            return false;
        }
        if (!UserState.UserId.HasValue)
        {
            formError = "Fejl: Kunne ikke identificere bruger. Prøv at logge ind igen.";
            return false;
        }
        // Hvis vi når hertil, er alle tjek bestået.
        return true;
    }

    /// <summary>
    /// Håndterer den fysiske lagring af filer på serveren og opretter referencer i databasen.
    /// </summary>
    /// <param name="listingId">ID'et på den annonce, billederne skal knyttes til.</param>
    private async Task ProcessImagesAsync(int listingId)
    {
        // Sammensætter den fulde sti til upload-mappen (f.eks. C:\...\wwwroot\uploads\listings).
        var uploadPath = Path.Combine(Environment.WebRootPath, "uploads", "listings");
        // Opretter mappen, hvis den ikke allerede eksisterer.
        Directory.CreateDirectory(uploadPath);

        // Løber igennem hver fil, brugeren har valgt.
        foreach (var file in loadedFiles)
        {
            // Opretter et unikt filnavn for at undgå, at to filer overskriver hinanden.
            var uniqueFileName = $"{Guid.NewGuid()}{Path.GetExtension(file.Name)}";
            var fullPath = Path.Combine(uploadPath, uniqueFileName);

            // Åbner en stream til filens data (med en størrelsesbegrænsning på 5MB).
            await using var stream = file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024);
            // Opretter en fil på serverens disk.
            await using var fs = new FileStream(fullPath, FileMode.Create);
            // Kopierer data fra den uploadede fil til filen på disken.
            await stream.CopyToAsync(fs);

            // Kald repository'et for at gemme referencen (det unikke filnavn) i 'listing_images'-tabellen i databasen.
            await ListingRepo.AddImageAsync(listingId, uniqueFileName);
        }
    }
}