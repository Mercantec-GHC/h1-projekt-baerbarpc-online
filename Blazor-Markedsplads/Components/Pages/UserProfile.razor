@page "/UserProfile"
@using System.ComponentModel.DataAnnotations
@using BlazorMarkedsplads.Models
@using BCrypt.Net
@inject NavigationManager NavManager
@inject IUserRepository UserRepo
@inject IJSRuntime JSRuntime
@inject IListingRepository ListingRepo
@inject UserStateService UserState
@rendermode InteractiveServer

<PageTitle>Min Konto</PageTitle>

<section class="py-5" style="background-color:#f8f9fa; min-height:70vh;">
    <div class="container">
        <h3 class="fw-bold mb-4">Min Konto</h3>
        <p class="text-muted mb-5">Administrer dine personlige oplysninger og annoncer</p>

        <div class="row">
            <aside class="col-md-3 mb-4 mb-md-0">
                <div class="list-group list-group-flush">
                    <a @onclick='() => SetActiveTab("personal")' class="list-group-item list-group-item-action @(activeTab == "personal" ? "active" : "")" style="cursor:pointer;">
                        Personlige Oplysninger
                    </a>
                    <a @onclick='() => SetActiveTab("password")' class="list-group-item list-group-item-action @(activeTab == "password" ? "active" : "")" style="cursor:pointer;">
                        Adgangskode
                    </a>
                    <a @onclick='() => SetActiveTab("active-ads")' class="list-group-item list-group-item-action @(activeTab == "active-ads" ? "active" : "")" style="cursor:pointer;">
                        Mine Annoncer
                    </a>
                    <a href="/CreateListing" class="list-group-item list-group-item-action">
                        Opret Ny Annonce
                    </a>

                    <button class="btn btn-link text-danger text-start mt-4 ms-2" @onclick="LogoutAsync">
                        <i class="bi bi-box-arrow-left me-1"></i> Log ud
                    </button>
                </div>
            </aside>

            <div class="col-md-9">
                @if (isLoading)
                {
                    <p><em>Indlæser brugerprofil...</em></p>
                }
                else
                {
                    @switch (activeTab)
                    {
                        case "personal":
                            @* --- Din HTML for 'personal' fanebladet her --- *@
                            break;

                        case "password":
                            @* --- Din HTML for 'password' fanebladet her --- *@
                            break;

                        case "active-ads":
                            @* --- Din HTML for 'active-ads' fanebladet her --- *@
                            break;

                        default:
                            <p>Vælg venligst en kategori fra menuen til venstre.</p>
                            break;
                    }
                }
            </div>
        </div>
    </div>
</section>

@code {
    // ------------------- PAGE STATE & MODELS -------------------
    // Holder styr på sidens nuværende tilstand og de datamodeller, der bruges i formularerne.

    // En boolean til at styre visningen af en "loading..."-besked, mens de indledende data hentes.
    private bool isLoading = true;

    // Holder navnet på det aktive faneblad (f.eks. "personal", "password"). Starter på "personal".
    private string activeTab = "personal";

    // Holder det fulde User-objekt for den bruger, der er logget ind. Kan være 'null' før data er hentet.
    private User? currentUser;

    // Datamodeller, der er bundet til de forskellige formularer på siden.
    private ProfileModel profile = new();          // Til opdatering af personlige oplysninger.
    private PasswordChangeModel passwordModel = new(); // Til ændring af adgangskode.

    // En liste til at holde alle den aktuelle brugers annoncer.
    private List<Listing> userListings = new();

    // Strenge til at vise succes- eller fejlbeskeder til brugeren i de forskellige sektioner.
    private string? profileSuccessMessage;
    private string? profileErrorMessage;
    private string? passwordSuccessMessage;
    private string? passwordErrorMessage;
    private string? listingsError;

    // ------------------- LIFECYCLE METHODS -------------------
    // Metoder, som Blazor kalder automatisk på bestemte tidspunkter.

    /// <summary>
    /// Kører, efter komponenten er blevet renderet i browseren. Perfekt til at kalde JavaScript
    /// og hente data, der er afhængig af browser-interaktion som f.eks. localStorage.
    /// </summary>
    /// <param name="firstRender">Er true den allerførste gang, komponenten vises.</param>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Vi ønsker kun at hente al data én gang, når siden indlæses første gang.
        if (firstRender)
        {
            // Kald vores centrale initialiserings-metode.
            await InitializePageAsync();

            // Når alt er hentet, sætter vi isLoading til false for at fjerne loading-beskeden.
            isLoading = false;

            // Fortæl Blazor, at sidens state er ændret, så UI'et opdateres.
            StateHasChanged();
        }
    }

    // ------------------- INITIALIZATION LOGIC -------------------
    // Metoder, der er ansvarlige for at forberede og indlæse sidens data.

    /// <summary>
    /// Orkestrerer hele processen med at indlæse brugerdata og annoncer.
    /// </summary>
    private async Task InitializePageAsync()
    {
        // Kald JavaScript for at hente brugerens ID (uid), som blev gemt i localStorage ved login.
        var uidString = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "uid");

        // Forsøg at konvertere strengen fra localStorage til et heltal.
        if (int.TryParse(uidString, out var userId))
        {
            // Hvis det lykkes, hent den fulde brugerprofil fra databasen.
            currentUser = await UserRepo.GetByIdAsync(userId);
            if (currentUser != null)
            {
                // Hvis brugeren findes, udfyld formularen med brugerens data og hent brugerens annoncer.
                PopulateProfileModel(currentUser);
                await LoadUserListingsAsync(currentUser.Id);
            }
            else
            {
                // Hvis der er et ID, men ingen bruger i databasen (en "zombie-session"), så log brugeren ud.
                await LogoutAsync();
            }
        }
        else
        {
            // Hvis der slet intet bruger-ID er i localStorage, sendes brugeren til login-siden.
            NavManager.NavigateTo("/login");
        }
    }

    /// <summary>
    /// Henter alle annoncer for en given bruger fra databasen.
    /// </summary>
    private async Task LoadUserListingsAsync(int userId)
    {
        try
        {
            userListings = await ListingRepo.GetByUserIdAsync(userId);
        }
        catch (Exception ex)
        {
            listingsError = $"Kunne ikke hente dine annoncer: {ex.Message}";
        }
    }

    // ------------------- TAB NAVIGATION & LOGOUT -------------------
    // Metoder til at styre brugerfladen og den generelle session.

    /// <summary>
    /// Skifter det aktive faneblad, som vises i højre panel.
    /// </summary>
    private void SetActiveTab(string tabName)
    {
        activeTab = tabName;
        // Nulstil alle feedback-beskeder for en ren brugeroplevelse, når der skiftes fane.
        profileSuccessMessage = profileErrorMessage = passwordSuccessMessage = passwordErrorMessage = null;
    }

    /// <summary>
    /// Logger brugeren ud af systemet.
    /// </summary>
    private async Task LogoutAsync()
    {
        // Fjern bruger-ID'et fra browserens localStorage.
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "uid");
        // Opdater den centrale UserStateService for at signalere logout til resten af appen.
        UserState.Logout();
        // Send brugeren til login-siden.
        NavManager.NavigateTo("/login");
    }

    // ------------------- PROFILE INFORMATION LOGIC -------------------
    // Metoder, der hører til "Personlige Oplysninger"-fanebladet.

    /// <summary>
    /// Udfylder 'profile'-modellen med data fra det hentede 'User'-objekt.
    /// </summary>
    private void PopulateProfileModel(User user)
    {
        // Deler navnet op i fornavn og efternavn.
        var nameParts = user.Name.Split(' ', 2, StringSplitOptions.RemoveEmptyEntries);
        profile = new ProfileModel
        {
            FirstName = nameParts.Length > 0 ? nameParts[0] : "",
            LastName = nameParts.Length > 1 ? nameParts[1] : "",
            Email = user.Email,
            Phone = user.Phone,
            Address = user.Address,
            City = user.City,
            Zip = user.ZipCode
        };
    }

    /// <summary>
    /// Gemmer de opdaterede profiloplysninger i databasen.
    /// </summary>
    private async Task SaveProfileAsync()
    {
        // Sikkerhedstjek for at sikre, at vi har en bruger at opdatere.
        if (currentUser == null) return;

        // Nulstil feedback-beskeder.
        profileSuccessMessage = profileErrorMessage = null;
        try
        {
            // Opdater properties på det 'currentUser'-objekt, vi allerede har i hukommelsen.
            currentUser.Name = $"{profile.FirstName} {profile.LastName}".Trim();
            currentUser.Email = profile.Email;
            currentUser.Phone = profile.Phone ?? "";
            currentUser.Address = profile.Address ?? "";
            currentUser.City = profile.City ?? "";
            currentUser.ZipCode = profile.Zip ?? "";

            // Send det nu opdaterede objekt til repository'et, som gemmer det i databasen.
            await UserRepo.UpdateAsync(currentUser);

            // Vis en succesbesked til brugeren.
            profileSuccessMessage = "Dine oplysninger er gemt.";
        }
        catch (Exception ex)
        {
            profileErrorMessage = "Kunne ikke gemme din profil: " + ex.Message;
        }
    }

    // ------------------- PASSWORD CHANGE LOGIC -------------------
    // Metoder, der hører til "Adgangskode"-fanebladet.

    /// <summary>
    /// Håndterer ændring af brugerens adgangskode.
    /// </summary>
    private async Task HandlePasswordChangeAsync()
    {
        if (currentUser == null) return;

        passwordSuccessMessage = passwordErrorMessage = null;
        try
        {
            // VIGTIGT: Hash den nye adgangskode, før den sendes til databasen.
            var hashedPassword = BCrypt.HashPassword(passwordModel.NewPassword);

            // Kald repository'et for at opdatere adgangskoden for den specifikke bruger.
            await UserRepo.UpdatePasswordAsync(currentUser.Id, hashedPassword);

            passwordSuccessMessage = "Din adgangskode er blevet opdateret!";
            passwordModel = new(); // Nulstil formularen for at rydde felterne.
        }
        catch (Exception ex)
        {
            passwordErrorMessage = $"Fejl: Kunne ikke opdatere adgangskode. {ex.Message}";
        }
    }

    // ------------------- USER LISTINGS LOGIC -------------------
    // Metoder, der hører til "Mine Annoncer"-fanebladet.

    /// <summary>
    /// Navigerer brugeren til redigeringssiden for en specifik annonce.
    /// </summary>
    private void EditAd(int listingId)
    {
        // Sender brugeren til CreateListing-siden og tilføjer annonce-ID'et som en query parameter.
        // CreateListing.razor vil så genkende dette og gå i "rediger"-tilstand.
        NavManager.NavigateTo($"/CreateListing?editId={listingId}");
    }

    /// <summary>
    /// Håndterer sletning af en annonce efter bekræftelse fra brugeren.
    /// </summary>
    private async Task ConfirmDeleteAdAsync(int listingId)
    {
        // Brug JavaScript til at vise en standard bekræftelsesdialog i browseren.
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Er du sikker på, at du vil slette denne annonce? Handlingen kan ikke fortrydes.");

        // Fortsæt kun, hvis brugeren klikkede "OK".
        if (confirmed)
        {
            try
            {
                // Kald repository'et for at slette annoncen fra databasen.
                await ListingRepo.DeleteAsync(listingId);
                // Fjern annoncen fra listen i UI'et med det samme for en hurtig respons.
                userListings.RemoveAll(ad => ad.Id == listingId);
            }
            catch (Exception ex)
            {
                listingsError = $"Fejl under sletning: {ex.Message}";
            }
        }
    }

    // ------------------- PAGE-SPECIFIC MODEL CLASSES -------------------
    // Private, indlejrede klasser, der kun bruges af denne side til at definere formularmodeller.

    private class ProfileModel
    {
        [Required]
        public string FirstName { get; set; } = string.Empty;
        public string LastName { get; set; } = string.Empty;
        [Required, EmailAddress]
        public string Email { get; set; } = string.Empty;
        public string? Phone { get; set; }
        public string? Address { get; set; }
        public string? City { get; set; }
        public string? Zip { get; set; }
    }

    private class PasswordChangeModel
    {
        [Required(ErrorMessage = "Ny adgangskode er påkrævet")]
        [MinLength(6, ErrorMessage = "Adgangskode skal være mindst 6 tegn")]
        public string NewPassword { get; set; } = string.Empty;

        [Required(ErrorMessage = "Bekræft venligst adgangskoden")]
        [Compare(nameof(NewPassword), ErrorMessage = "Adgangskoderne matcher ikke")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}