@page "/UserProfile"
@using System.ComponentModel.DataAnnotations
@using System.Globalization
@using BlazorMarkedsplads.Models
@using BCrypt.Net;
@inject NavigationManager NavManager
@inject IUserRepository UserRepo
@inject IJSRuntime JSRuntime
@inject IListingRepository ListingRepo
@rendermode InteractiveServer

<PageTitle>Min Konto</PageTitle>

<!-- =========  Sideindhold ========= -->
<section class="py-5" style="background-color:#f8f9fa; min-height:70vh;">
    <div class="container">
        <h3 class="fw-bold mb-4">Min Konto</h3>
        <p class="text-muted mb-5">Administrer dine personlige oplysninger og annoncer</p>

        <div class="row">
            <!-- =======  Venstre side-menu  ======= -->
            <aside class="col-md-3 mb-4 mb-md-0">
                <div class="list-group list-group-flush">
                    <a @onclick='() => SetActiveTab("personal")' class="list-group-item list-group-item-action @(activeTab == "personal" ? "active" : "")" style="cursor:pointer;">
                        Personlige Oplysninger
                    </a>
                    <a @onclick='() => SetActiveTab("password")' class="list-group-item list-group-item-action @(activeTab == "password" ? "active" : "")" style="cursor:pointer;">
                        Adgangskode
                    </a>
                    <a @onclick='() => SetActiveTab("notifications")' class="list-group-item list-group-item-action @(activeTab == "notifications" ? "active" : "")" style="cursor:pointer;">
                        Notifikationer
                    </a>
                    <a @onclick='() => SetActiveTab("payments")' class="list-group-item list-group-item-action @(activeTab == "payments" ? "active" : "")" style="cursor:pointer;">
                        Betalingsmetoder
                    </a>

                    <small class="text-uppercase text-muted px-3 pt-4">Mine Annoncer</small>
                    <a @onclick='() => SetActiveTab("active-ads")' class="list-group-item list-group-item-action @(activeTab == "active-ads" ? "active" : "")" style="cursor:pointer;">
                        Aktive Annoncer
                    </a>
                    <a @onclick='() => SetActiveTab("saved-ads")' class="list-group-item list-group-item-action @(activeTab == "saved-ads" ? "active" : "")" style="cursor:pointer;">
                        Gemte Annoncer
                    </a>
                    <a href="/CreateListing" class="list-group-item list-group-item-action">
                        Opret Ny Annonce
                    </a>

                    <button class="btn btn-link text-danger mt-4 ms-2" @onclick="Logout">
                        <i class="bi bi-box-arrow-left me-1"></i> Log ud
                    </button>
                </div>
            </aside>

            <!-- =======  Højre hoved-panel  ======= -->
            <div class="col-md-9">

                @switch (activeTab)
                {
                    case "personal":
                        <div class="card border-0 shadow-sm">
                            <div class="card-body p-4">
                                <h5 class="fw-bold mb-1">Personlige Oplysninger</h5>
                                <p class="text-muted small mb-4">Opdater dine personlige oplysninger</p>

                                <EditForm Model="profile" OnValidSubmit="SaveProfile">
                                    @* Din eksisterende EditForm for profilen indsættes her *@
                                    <DataAnnotationsValidator />
                                    <ValidationSummary />

                                    <div class="row g-3">
                                        <div class="col-md-6">
                                            <label class="form-label small fw-semibold">Fornavn</label>
                                            <InputText class="form-control" @bind-Value="profile.FirstName" />
                                            <ValidationMessage For="() => profile.FirstName" />
                                        </div>
                                        <div class="col-md-6">
                                            <label class="form-label small fw-semibold">Efternavn</label>
                                            <InputText class="form-control" @bind-Value="profile.LastName" />
                                            <ValidationMessage For="() => profile.LastName" />
                                        </div>
                                        <div class="col-md-6">
                                            <label class="form-label small fw-semibold">Email</label>
                                            <InputText class="form-control" @bind-Value="profile.Email" />
                                            <ValidationMessage For="() => profile.Email" />
                                        </div>
                                        <div class="col-md-6">
                                            <label class="form-label small fw-semibold">Telefonnummer</label>
                                            <InputText class="form-control" @bind-Value="profile.Phone" />
                                            <ValidationMessage For="() => profile.Phone" />
                                        </div>
                                        <div class="col-12">
                                            <label class="form-label small fw-semibold">Adresse</label>
                                            <InputText class="form-control" @bind-Value="profile.Address" />
                                        </div>
                                        <div class="col-md-6">
                                            <label class="form-label small fw-semibold">By</label>
                                            <InputText class="form-control" @bind-Value="profile.City" />
                                        </div>
                                        <div class="col-md-6">
                                            <label class="form-label small fw-semibold">Postnummer</label>
                                            <InputText class="form-control" @bind-Value="profile.Zip" />
                                        </div>
                                    </div>

                                    <div class="d-flex justify-content-end gap-2 mt-4">
                                        <button type="button" class="btn btn-outline-secondary" @onclick="ResetProfile">
                                            Annuller
                                        </button>
                                        <button type="submit" class="btn btn-primary">Gem Ændringer</button>
                                    </div>
                                </EditForm>
                            </div>
                        </div>
                        break;

                    case "password":
                        <div class="card border-0 shadow-sm">
                            <div class="card-body p-4">
                                <h5 class="fw-bold mb-1">Skift Adgangskode</h5>
                                <p class="text-muted small mb-4">Indtast og bekræft din nye adgangskode.</p>

                                <EditForm Model="passwordModel" OnValidSubmit="HandlePasswordChange">
                                    <DataAnnotationsValidator />

                                    @if (!string.IsNullOrEmpty(passwordSuccessMessage))
                                    {
                                        <div class="alert alert-success">@passwordSuccessMessage</div>
                                    }
                                    @if (!string.IsNullOrEmpty(passwordErrorMessage))
                                    {
                                        <div class="alert alert-danger">@passwordErrorMessage</div>
                                    }

                                    <div class="mb-3">
                                        <label class="form-label small fw-semibold">Ny Adgangskode</label>
                                        <InputText type="password" class="form-control" @bind-Value="passwordModel.NewPassword" />
                                        <ValidationMessage For="@(() => passwordModel.NewPassword)" />
                                    </div>

                                    <div class="mb-3">
                                        <label class="form-label small fw-semibold">Bekræft Ny Adgangskode</label>
                                        <InputText type="password" class="form-control" @bind-Value="passwordModel.ConfirmPassword" />
                                        <ValidationMessage For="@(() => passwordModel.ConfirmPassword)" />
                                    </div>

                                    <div class="d-flex justify-content-end">
                                        <button type="submit" class="btn btn-primary">Gem ny adgangskode</button>
                                    </div>
                                </EditForm>
                            </div>
                        </div>
                        break;

                    case "notifications":
                        <div class="card border-0 shadow-sm">
                            <div class="card-body p-4">
                                <h5 class="fw-bold mb-1">Notifikationer</h5>
                                <p class="text-muted small mb-4">Vælg hvilke notifikationer du vil modtage.</p>
                                <p><em>Indstillinger for notifikationer kommer her...</em></p>
                            </div>
                        </div>
                        break;

                    case "active-ads":
                        <div class="card border-0 shadow-sm">
                            <div class="card-body p-4">
                                <h5 class="fw-bold mb-1">Mine Aktive Annoncer</h5>
                                <p class="text-muted small mb-4">Oversigt over dine nuværende annoncer.</p>

                                @if (!string.IsNullOrEmpty(listingsError))
                                {
                                    <div class="alert alert-danger">@listingsError</div>
                                }
                                else if (userListings.Any())
                                {
                                    <ul class="list-group list-group-flush">
                                        @foreach (var ad in userListings)
                                        {
                                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                                <div>
                                                    <a href="/ListingDetailsPage/@ad.Id" class="fw-semibold">@ad.Title</a>
                                                    <small class="d-block text-muted">@ad.Brand @ad.Model - @ad.Price.ToString("N0") kr.</small>
                                                </div>
                                                <div>
                                                    <button class="btn btn-sm btn-outline-primary me-2" @onclick="() => EditAd(ad.Id)">Rediger</button>
                                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => ConfirmDeleteAd(ad.Id)">Slet</button>
                                                </div>
                                            </li>
                                        }
                                    </ul>
                                }
                                else
                                {
                                    <p>Du har ingen aktive annoncer.</p>
                                }
                            </div>
                        </div>
                        break;

                    // Tilføj flere 'case' for de andre faneblade her...

                    default:
                        <p>Vælg venligst en kategori fra menuen til venstre.</p>
                        break;
                }

            </div>
        </div>
    </div>
</section>

@code {


    // Properties til adgangskode-ændring
    private PasswordChangeModel passwordModel = new();
    private string? passwordSuccessMessage;
    private string? passwordErrorMessage;

    // Properties til navigation og state
    private string activeTab = "personal";
    [Inject] private UserStateService UserState { get; set; } = default!;
    private string? success;
    private string? formError;
    private bool _hasFetchedFromLocalStorage = false;

    // Properties til brugerprofil
    private int userId;
    private ProfileModel profile = new();

    // Properties til brugerens annoncer
    private List<Listing> userListings = new();
    private string? listingsError;

    private void SetActiveTab(string tabName)
    {
        activeTab = tabName;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_hasFetchedFromLocalStorage)
        {
            _hasFetchedFromLocalStorage = true;

            var raw = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "uid");
            if (!int.TryParse(raw, out userId))
            {
                NavManager.NavigateTo("/login", forceLoad: true);
                return;
            }

            var u = await UserRepo.GetByIdAsync(userId);
            if (u is null)
            {
                NavManager.NavigateTo("/login", forceLoad: true);
                return;
            }

            var parts = u.Name.Split(' ', 2, StringSplitOptions.RemoveEmptyEntries);
            profile.FirstName = parts.Length > 0 ? parts[0] : "";
            profile.LastName = parts.Length > 1 ? parts[1] : "";
            profile.Email = u.Email;
            profile.Phone = u.Phone;
            profile.Address = u.Address;
            profile.City = u.City;
            profile.Zip = u.ZipCode;

            // Hent brugerens annoncer
            try
            {
                userListings = await ListingRepo.GetByUserIdAsync(userId);
            }
            catch (Exception ex)
            {
                listingsError = $"Kunne ikke hente dine annoncer: {ex.Message}";
            }

            StateHasChanged();
        }
    }

    private async Task SaveProfile()
    {
        try
        {
            var updated = new User
            {
                Id = userId,
                Name = $"{profile.FirstName} {profile.LastName}".Trim(),
                Email = profile.Email,
                Password = "",
                Phone = profile.Phone,
                Address = profile.Address,
                City = profile.City,
                ZipCode = profile.Zip
            };
            await UserRepo.UpdateAsync(updated);
            success = "Dine oplysninger er gemt.";
        }
        catch (Exception ex)
        {
            formError = "Kunne ikke gemme din profil: " + ex.Message;
        }
    }

    private void ResetProfile()
    {
        NavManager.NavigateTo(NavManager.Uri, forceLoad: true);
    }

    private async Task Logout()
    {
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "uid");
        UserState.Logout();
        NavManager.NavigateTo("/login");
    }

    // --- ANNONCE-FUNKTIONER (KORREKT VERSION) ---
    private void EditAd(int listingId)
    {
        NavManager.NavigateTo($"/CreateListing?editId={listingId}");
    }

    private async Task ConfirmDeleteAd(int listingId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Er du sikker på, at du vil slette denne annonce? Handlingen kan ikke fortrydes.");
        if (confirmed)
        {
            try
            {
                await ListingRepo.DeleteAsync(listingId);
                userListings.RemoveAll(ad => ad.Id == listingId);
                StateHasChanged();
            }
            catch (Exception ex)
            {
                listingsError = $"Fejl under sletning: {ex.Message}";
            }
        }
    }

    // --- PROFIL & ADGANGSKODE MODELLER OG METODER ---
    private class ProfileModel
    {
        public string FirstName { get; set; } = string.Empty;
        public string LastName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string? Phone { get; set; }
        public string? Address { get; set; }
        public string? City { get; set; }
        public string? Zip { get; set; }
    }

    private class PasswordChangeModel
    {
        [Required(ErrorMessage = "Ny adgangskode er påkrævet")]
        [MinLength(6, ErrorMessage = "Adgangskode skal være mindst 6 tegn")]
        public string NewPassword { get; set; } = string.Empty;

        [Required(ErrorMessage = "Bekræft venligst adgangskoden")]
        [Compare(nameof(NewPassword), ErrorMessage = "Adgangskoderne matcher ikke")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }

    private async Task HandlePasswordChange()
    {
        passwordSuccessMessage = null;
        passwordErrorMessage = null;
        try
        {
            var hashedPassword = BCrypt.HashPassword(passwordModel.NewPassword);
            await UserRepo.UpdatePasswordAsync(userId, hashedPassword);
            passwordSuccessMessage = "Din adgangskode er blevet opdateret!";
            passwordModel = new();
        }
        catch (Exception ex)
        {
            passwordErrorMessage = $"Fejl: Kunne ikke opdatere adgangskode. {ex.Message}";
        }
    }
}