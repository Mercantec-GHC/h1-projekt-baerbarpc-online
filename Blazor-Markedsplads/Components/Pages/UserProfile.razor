@page "/UserProfile"
@using System.ComponentModel.DataAnnotations
@using System.Globalization
@using BlazorMarkedsplads.Models
@inject NavigationManager NavManager
@inject IUserRepository UserRepo
@inject DBService DbService
@inject IJSRuntime JSRuntime
@inject IListingRepository ListingRepo
@rendermode InteractiveServer

<PageTitle>Min Konto</PageTitle>

<!-- … resten af markup som før … -->
@code {
    private string? success;
    private string? formError;

    private int userId;
    private ProfileModel profile = new();
    private List<ListingCardModel>? UserAds;

    // Vi sætter en flag, så vi kun henter JS én gang i OnAfterRenderAsync
    private bool _hasFetchedFromLocalStorage = false;

    protected override async Task OnInitializedAsync()
    {
        // Vi henter IKKE længere localStorage her −
        // forbered kun data, men vent med JS-interop
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_hasFetchedFromLocalStorage)
        {
            _hasFetchedFromLocalStorage = true;

            // 1) Hent userId fra localStorage NU hvor JS er tilgængeligt
            var raw = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "uid");
            if (!int.TryParse(raw, out userId))
            {
                // Hvis vi ikke har et gyldigt UID, videresend til login
                NavManager.NavigateTo("/login", forceLoad: true);
                return;
            }

            // 2) Hent brugerdata til profilen fra databasen
            var u = await UserRepo.GetByIdAsync(userId);
            if (u is null)
            {
                NavManager.NavigateTo("/login", forceLoad: true);
                return;
            }

            // Split fulde navn i fornavn + efternavn
            var parts = u.Name.Split(' ', 2, StringSplitOptions.RemoveEmptyEntries);
            profile.FirstName = parts.Length > 0 ? parts[0] : "";
            profile.LastName = parts.Length > 1 ? parts[1] : "";
            profile.Email = u.Email;
            profile.Phone = u.Phone;
            profile.Address = u.Address;
            profile.City = u.City;
            profile.Zip = u.ZipCode;

            // 3) Hent alle listings for denne bruger
            UserAds = await DbService.GetListingsByUserIdAsync(userId);

            // Efter vi har opdateret state, skal vi kalde StateHasChanged()
            // for at få UI til at opdatere sig med de indlæste data
            StateHasChanged();
        }
    }

    private async Task SaveProfile()
    {
        try
        {
            var updated = new User
                {
                    Id = userId,
                    Name = $"{profile.FirstName} {profile.LastName}".Trim(),
                    Email = profile.Email,
                    Password = "", // Ændrer ikke password her
                    Phone = profile.Phone,
                    Address = profile.Address,
                    City = profile.City,
                    ZipCode = profile.Zip
                };

            await UserRepo.UpdateAsync(updated);
            success = "Dine oplysninger er gemt.";
        }
        catch (Exception ex)
        {
            formError = "Kunne ikke gemme din profil: " + ex.Message;
        }
    }

    private void ResetProfile()
    {
        NavManager.NavigateTo(NavManager.Uri, forceLoad: true);
    }

    private async Task Logout()
    {
        // JS-interop til at fjerne lokalStorage, altså heller IKKE i OnInitialized
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "uid");
        NavManager.NavigateTo("/login", forceLoad: true);
    }

    private void EditAd(int listingId)
    {
        NavManager.NavigateTo($"/CreateListing?editId={listingId}");
    }

    private void DeleteAd(int listingId)
    {
        Console.WriteLine($"Slet annonce med ID = {listingId}");
        // … evt. kald DbService.DeleteListingAsync(listingId) …
    }

    private class ProfileModel
    {
        [Required(ErrorMessage = "Fornavn er påkrævet")]
        public string FirstName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Efternavn er påkrævet")]
        public string LastName { get; set; } = string.Empty;

        [Required, EmailAddress(ErrorMessage = "Ugyldig email")]
        public string Email { get; set; } = string.Empty;

        public string? Phone { get; set; }
        public string? Address { get; set; }
        public string? City { get; set; }
        public string? Zip { get; set; }
    }
}
