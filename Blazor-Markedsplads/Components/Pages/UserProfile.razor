@page "/UserProfile"
@using System.ComponentModel.DataAnnotations
@using BlazorMarkedsplads.Models
@using BCrypt.Net
@inject NavigationManager NavManager
@inject IUserRepository UserRepo
@inject IJSRuntime JSRuntime
@inject IListingRepository ListingRepo
@inject UserStateService UserState
@rendermode InteractiveServer

<PageTitle>Min Konto</PageTitle>

<section class="py-5" style="background-color:#f8f9fa; min-height:70vh;">
    <div class="container">
        <h3 class="fw-bold mb-4">Min Konto</h3>
        <p class="text-muted mb-5">Administrer dine personlige oplysninger og annoncer</p>

        <div class="row">
            <aside class="col-md-3 mb-4 mb-md-0">
                <div class="list-group list-group-flush">
                    <a @onclick='() => SetActiveTab("personal")' class="list-group-item list-group-item-action @(activeTab == "personal" ? "active" : "")" style="cursor:pointer;">
                        Personlige Oplysninger
                    </a>
                    <a @onclick='() => SetActiveTab("password")' class="list-group-item list-group-item-action @(activeTab == "password" ? "active" : "")" style="cursor:pointer;">
                        Adgangskode
                    </a>
                    <a @onclick='() => SetActiveTab("active-ads")' class="list-group-item list-group-item-action @(activeTab == "active-ads" ? "active" : "")" style="cursor:pointer;">
                        Mine Annoncer
                    </a>
                    <a href="/CreateListing" class="list-group-item list-group-item-action">
                        Opret Ny Annonce
                    </a>

                    <button class="btn btn-link text-danger text-start mt-4 ms-2" @onclick="LogoutAsync">
                        <i class="bi bi-box-arrow-left me-1"></i> Log ud
                    </button>
                </div>
            </aside>

            <div class="col-md-9">
                @if (isLoading)
                {
                    <p><em>Indlæser brugerprofil...</em></p>
                }
                else
                {
                    @switch (activeTab)
                    {
                        case "personal":
                            @* --- Din HTML for 'personal' fanebladet her --- *@
                            break;

                        case "password":
                            @* --- Din HTML for 'password' fanebladet her --- *@
                            break;

                        case "active-ads":
                            @* --- Din HTML for 'active-ads' fanebladet her --- *@
                            break;

                        default:
                            <p>Vælg venligst en kategori fra menuen til venstre.</p>
                            break;
                    }
                }
            </div>
        </div>
    </div>
</section>

@code {
    // -- Page State & Models --
    private bool isLoading = true;
    private string activeTab = "personal"; // Startfaneblad
    private User? currentUser;

    // Modeller for de forskellige faneblades formularer
    private ProfileModel profile = new();
    private PasswordChangeModel passwordModel = new();
    private List<Listing> userListings = new();

    // Feedback-beskeder til brugeren
    private string? profileSuccessMessage;
    private string? profileErrorMessage;
    private string? passwordSuccessMessage;
    private string? passwordErrorMessage;
    private string? listingsError;

    // -- Lifecycle Methods --
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Denne logik kører kun én gang, når komponenten er blevet vist i browseren.
        if (firstRender)
        {
            await InitializePageAsync();
            isLoading = false; // Stop loading-indikatoren
            StateHasChanged(); // Opdater UI
        }
    }

    // -- Initialization Logic --
    private async Task InitializePageAsync()
    {
        var uidString = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "uid");
        if (int.TryParse(uidString, out var userId))
        {
            currentUser = await UserRepo.GetByIdAsync(userId);
            if (currentUser != null)
            {
                // Bruger fundet, indlæs data til formularer og lister
                PopulateProfileModel(currentUser);
                await LoadUserListingsAsync(currentUser.Id);
            }
            else
            {
                // Bruger-ID findes, men ingen bruger i DB. Log ud.
                await LogoutAsync();
            }
        }
        else
        {
            // Intet bruger-ID fundet. Send til login.
            NavManager.NavigateTo("/login");
        }
    }

    private async Task LoadUserListingsAsync(int userId)
    {
        try
        {
            userListings = await ListingRepo.GetByUserIdAsync(userId);
        }
        catch (Exception ex)
        {
            listingsError = $"Kunne ikke hente dine annoncer: {ex.Message}";
        }
    }

    // -- Tab Navigation --
    private void SetActiveTab(string tabName)
    {
        activeTab = tabName;
        // Nulstil fejlbeskeder når man skifter faneblad for en renere oplevelse
        profileSuccessMessage = profileErrorMessage = passwordSuccessMessage = passwordErrorMessage = null;
    }

    private async Task LogoutAsync()
    {
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "uid");
        UserState.Logout();
        NavManager.NavigateTo("/login");
    }

    // -- Profile Information Logic --
    private void PopulateProfileModel(User user)
    {
        var nameParts = user.Name.Split(' ', 2, StringSplitOptions.RemoveEmptyEntries);
        profile = new ProfileModel
        {
            FirstName = nameParts.Length > 0 ? nameParts[0] : "",
            LastName = nameParts.Length > 1 ? nameParts[1] : "",
            Email = user.Email,
            Phone = user.Phone,
            Address = user.Address,
            City = user.City,
            Zip = user.ZipCode
        };
    }

    private async Task SaveProfileAsync()
    {
        if (currentUser == null) return;

        profileSuccessMessage = profileErrorMessage = null;
        try
        {
            // Vi opdaterer direkte på det 'currentUser'-objekt, vi allerede har.
            // Dette er den korrekte fremgangsmåde for en 'class'.
            currentUser.Name = $"{profile.FirstName} {profile.LastName}".Trim();
            currentUser.Email = profile.Email; // Overvej om brugeren skal have lov til at ændre sin email.
            currentUser.Phone = profile.Phone ?? "";
            currentUser.Address = profile.Address ?? "";
            currentUser.City = profile.City ?? "";
            currentUser.ZipCode = profile.Zip ?? "";

            // Send det opdaterede objekt til repository'et.
            await UserRepo.UpdateAsync(currentUser);

            profileSuccessMessage = "Dine oplysninger er gemt.";
        }
        catch (Exception ex)
        {
            profileErrorMessage = "Kunne ikke gemme din profil: " + ex.Message;
        }
    }

    // -- Password Change Logic --
    private async Task HandlePasswordChangeAsync()
    {
        if (currentUser == null) return;

        passwordSuccessMessage = passwordErrorMessage = null;
        try
        {
            var hashedPassword = BCrypt.HashPassword(passwordModel.NewPassword);
            await UserRepo.UpdatePasswordAsync(currentUser.Id, hashedPassword);

            passwordSuccessMessage = "Din adgangskode er blevet opdateret!";
            passwordModel = new(); // Nulstil formularen
        }
        catch (Exception ex)
        {
            passwordErrorMessage = $"Fejl: Kunne ikke opdatere adgangskode. {ex.Message}";
        }
    }

    // -- User Listings Logic --
    private void EditAd(int listingId)
    {
        NavManager.NavigateTo($"/CreateListing?editId={listingId}");
    }

    private async Task ConfirmDeleteAdAsync(int listingId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Er du sikker på, at du vil slette denne annonce? Handlingen kan ikke fortrydes.");
        if (confirmed)
        {
            try
            {
                await ListingRepo.DeleteAsync(listingId);
                userListings.RemoveAll(ad => ad.Id == listingId); // Opdater UI med det samme
            }
            catch (Exception ex)
            {
                listingsError = $"Fejl under sletning: {ex.Message}";
            }
        }
    }

    // -- Page-Specific Model Classes --
    private class ProfileModel
    {
        [Required]
        public string FirstName { get; set; } = string.Empty;
        public string LastName { get; set; } = string.Empty;
        [Required, EmailAddress]
        public string Email { get; set; } = string.Empty;
        public string? Phone { get; set; }
        public string? Address { get; set; }
        public string? City { get; set; }
        public string? Zip { get; set; }
    }

    private class PasswordChangeModel
    {
        [Required(ErrorMessage = "Ny adgangskode er påkrævet")]
        [MinLength(6, ErrorMessage = "Adgangskode skal være mindst 6 tegn")]
        public string NewPassword { get; set; } = string.Empty;

        [Required(ErrorMessage = "Bekræft venligst adgangskoden")]
        [Compare(nameof(NewPassword), ErrorMessage = "Adgangskoderne matcher ikke")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}