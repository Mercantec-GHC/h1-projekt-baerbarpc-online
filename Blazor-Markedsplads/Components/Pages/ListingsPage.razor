@page "/ListingsPage"
@using System.Linq
@using BlazorMarkedsplads.Models
@inject DBService Db
@inject NavigationManager Nav

<PageTitle>Alle Annoncer</PageTitle>

<h2 class="mb-4">Bærbare computere</h2>

<!-- ===== Søg + sortér ===== -->
<div class="row mb-3 g-2">
    <div class="col-sm-4">
        <input class="form-control" placeholder="Søg …" @bind="SearchBox" />
    </div>

    <div class="col-sm-3">
        <select class="form-select" @bind="Order">
            <option value="priceDesc">Pris ↓</option>
            <option value="priceAsc">Pris ↑</option>
        </select>
    </div>

    <div class="col-sm-2 d-grid">
        <button class="btn btn-primary" @onclick="ApplySearch">Opdater</button>
    </div>
</div>

@if (isBusy)
{
    <p><em>Indlæser annoncer …</em></p>
}
else if (!view.Any())
{
    <p>Ingen annoncer matcher søgningen.</p>
}
else
{
    <!-- ===== Annoncer ===== -->
    <div class="row g-4">
        @foreach (var p in view)
        {
            <div class="col-12 col-sm-6 col-md-4 col-lg-3">
                <div class="card h-100 shadow-sm border-0">
                    <img src="images/laptop-placeholder.svg"
                         class="card-img-top" style="height:140px;object-fit:contain"
                         alt="@($"{p.Brand} {p.Model}")" />

                    <div class="card-body">
                        <h6 class="card-title fw-semibold">@($"{p.Brand} {p.Model}")</h6>
                        <p class="card-text small text-muted mb-1">
                            @($"{p.Cpu}, {p.Ram} RAM, {p.Storage}")
                        </p>
                        <p class="card-text fw-bold text-success mb-0">
                            @FormatPrice(p.Price)
                        </p>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- ===== Pagination ===== -->
    <nav class="mt-4">
        <ul class="pagination justify-content-center">
            <li class="page-item @(currentPage == 1 ? "disabled" : null)">
                <button class="page-link" @onclick="() => ChangePage(currentPage - 1)">«</button>
            </li>

            @for (int i = 1; i <= totalPages; i++)
            {
                <li class="page-item @(currentPage == i ? "active" : null)">
                    <button class="page-link" @onclick="() => ChangePage(i)">@i</button>
                </li>
            }

            <li class="page-item @(currentPage == totalPages ? "disabled" : null)">
                <button class="page-link" @onclick="() => ChangePage(currentPage + 1)">»</button>
            </li>
        </ul>
    </nav>
}

@code
{
    /* ---------- QUERY-STRING PARAMS ---------- */
    [SupplyParameterFromQuery(Name = "query")]
    public string? Query { get; set; }

    [SupplyParameterFromQuery(Name = "order")]
    public string Order { get; set; } = "priceDesc";

    [SupplyParameterFromQuery(Name = "page")]
    public int? PageFromUrl { get; set; }

    /* ---------- FELTER ---------- */
    private readonly int pageSize = 12;
    private int currentPage = 1;
    private int totalPages = 1;

    private string? SearchBox;
    private bool isBusy;

    private List<ProductModel> all = new();
    private IEnumerable<ProductModel> view = Enumerable.Empty<ProductModel>();

    /* ---------- LIFECYCLE ---------- */
    protected override async Task OnParametersSetAsync()
    {
        currentPage = PageFromUrl ?? 1;
        SearchBox = Query;         // vis aktuel søgestreng i input
        await LoadData();
        BuildView();
    }

    /* ---------- UI-HANDLERS ---------- */
    private void ApplySearch()
    {
        // nulstil til side 1 ved ny søgning/sortering
        var url = $"ListingsPage?query={Uri.EscapeDataString(SearchBox ?? "")}&order={Order}&page=1";
        Nav.NavigateTo(url);
    }

    private void ChangePage(int newPage)
    {
        if (newPage < 1 || newPage > totalPages) return;

        var url = $"ListingsPage?query={Uri.EscapeDataString(Query ?? "")}&order={Order}&page={newPage}";
        Nav.NavigateTo(url);
    }

    /* ---------- DATA ---------- */
    private async Task LoadData()
    {
        isBusy = true;

        all = string.IsNullOrWhiteSpace(Query)
            ? await Db.GetAllProductModelsAsync()
            : await Db.SearchProductModelsAsync(Query);

        isBusy = false;
    }

    private void BuildView()
    {
        IEnumerable<ProductModel> filtered = all;

        // sortering
        filtered = Order switch
        {
            "priceAsc" => filtered.OrderBy(p => CleanPrice(p.Price)),
            "priceDesc" => filtered.OrderByDescending(p => CleanPrice(p.Price)),
            _ => filtered
        };

        totalPages = Math.Max(1, (int)Math.Ceiling((double)filtered.Count() / pageSize));
        currentPage = Math.Clamp(currentPage, 1, totalPages);

        view = filtered
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize);
    }

    /* ---------- HELPERS ---------- */
    private static int CleanPrice(string raw)
    {
        var digits = new string(raw.Where(char.IsDigit).ToArray());
        return int.TryParse(digits, out var v) ? v : 0;
    }

    private static string FormatPrice(string raw)
    {
        var v = CleanPrice(raw);
        return v == 0 ? raw : $"{v:N0} kr";
    }
}
